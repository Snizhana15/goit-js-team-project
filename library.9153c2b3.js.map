{"mappings":"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","sources":["src/library.js","src/js/render-library.js"],"sourcesContent":["import * as things from './js/modal-film';\nimport * as elements from './js/localStorage';\nimport * as things from './js/change-button-condition';\nimport * as elem from './js/modal-students';\nimport { showLibraryPage, downloadLibraryPage } from './js/render-library';\n\ndownloadLibraryPage(showLibraryPage);\n","import { getGenresMarkup } from './render-popular-movies';\n\nconst refs = {\n  cardSet: document.querySelector('.card-set'),\n  showWatchedBtn: document.querySelector('.header-library__button--watched'),\n  showQueueBtn: document.querySelector('.header-library__button--queue'),\n  paginationSet: document.querySelector('.pagination'),\n};\n\nconst watchedSpinner = document.querySelector(\n  '.header-library--watched--spinner'\n);\nconst queueSpinner = document.querySelector('.header-library--queue--spinner');\n\nlet pageCount = 0;\nconst moviesbyPage = 6;\n\nconst getWatchedList = () => {\n  const parsedWatchedMovies = JSON.parse(\n    localStorage.getItem('watched') || '[]'\n  );\n  return parsedWatchedMovies;\n};\n\nconst getQueueList = () => {\n  const parsedQueueMovies = JSON.parse(localStorage.getItem('queue') || '[]');\n  return parsedQueueMovies;\n};\n\nconst getLibraryList = () => {\n  const parsedWatchedMovies = JSON.parse(\n    localStorage.getItem('watched') || '[]'\n  );\n\n  const parsedQueueMovies = JSON.parse(localStorage.getItem('queue') || '[]');\n\n  const parsedAllMoeviesList = [...parsedWatchedMovies, ...parsedQueueMovies];\n  const parsedUniqueMoeviesList = parsedAllMoeviesList.filter(\n    (movie, movieIdx, movies) =>\n      movies.findIndex(item => item.id === movie.id) === movies.indexOf(movie)\n  );\n\n  return parsedUniqueMoeviesList;\n};\n\nconst onShowWatched = () => {\n  watchedSpinner.classList.add('spinner');\n\n  refs.paginationSet.removeEventListener('click', onClickLibrary);\n  refs.paginationSet.removeEventListener('click', onClickQueue);\n\n  const watchedList = getWatchedList();\n\n  const startPageWatched = watchedList.slice(0, moviesbyPage);\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(watchedList);\n  renderWatched(startPageWatched);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickWatched);\n};\n\nconst onShowQueue = () => {\n  queueSpinner.classList.add('spinner');\n\n  refs.paginationSet.removeEventListener('click', onClickLibrary);\n  refs.paginationSet.removeEventListener('click', onClickWatched);\n\n  const queueList = getQueueList();\n  const startPageQueue = queueList.slice(0, moviesbyPage);\n\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(queueList);\n  renderWatched(startPageQueue);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickQueue);\n};\n\nconst showLibraryPage = () => {\n  refs.paginationSet.removeEventListener('click', onClickWatched);\n  refs.paginationSet.removeEventListener('click', onClickQueue);\n\n  const libraryList = getLibraryList();\n\n  const startPageLibrary = libraryList.slice(0, moviesbyPage);\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(libraryList);\n  renderWatched(startPageLibrary);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickLibrary);\n};\n\nconst renderWatched = parsedMovieFromStorage => {\n  parsedMovieFromStorage.map(renderLibrary);\n};\n\nconst getLibraryGenresById = (idList, genres) => {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n};\n\nconst renderLibrary = movies => {\n  const {\n    id,\n    poster_path,\n    original_title,\n    title,\n    release_date,\n    genres,\n    vote_average,\n  } = movies;\n\n  const productionYear = new Date(release_date).getFullYear().toString();\n\n  const idList = genres.map(i => (i = i.id));\n\n  const alphabetGenres = getLibraryGenresById(idList, genres);\n\n  const genresMarkup = getGenresMarkup(alphabetGenres);\n\n  const markup = `<li class=\"card-set__item\" data-id=\"${id}\">\n                <div class=\"card-set__box-img\"\">\n                <img src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${original_title}\"\n                class=\"card-set__img\"\n                />\n                </div>\n                <h3 class=\"card-set__title\">${title}</h3>\n                <div class=\"card-set__description\">\n                <ul class=\"card-set__genre\">\n                    ${genresMarkup}\n                </ul>\n                    <span class=\"card-set__production-year\">&nbsp| ${productionYear}&nbsp</span>\n                    <span class=\"card-set__rating\">${vote_average}</span>\n                </div>\n                </li>`;\n\n  refs.cardSet.insertAdjacentHTML('afterbegin', markup);\n  watchedSpinner.classList.remove('spinner');\n  queueSpinner.classList.remove('spinner');\n};\n\nconst getCountPages = arr => {\n  pageCount = Math.ceil(arr.length / moviesbyPage);\n};\n\nconst downloadLibraryPage = showLibraryPage => {\n  showLibraryPage();\n};\n\nrefs.showWatchedBtn.addEventListener('click', onShowWatched);\nrefs.showQueueBtn.addEventListener('click', onShowQueue);\n\nconst renderByPage = (a, arrayAllMoviesForRender) => {\n  const startPositionForRender = a * moviesbyPage - moviesbyPage;\n\n  const arrayMoviesByPage = arrayAllMoviesForRender.splice(\n    startPositionForRender,\n    moviesbyPage\n  );\n\n  refs.cardSet.innerHTML = '';\n  renderWatched(arrayMoviesByPage);\n  markupNumPage(pageCount);\n\n  const previousBtn = document.querySelector('.pagination__button--current');\n  previousBtn.classList.remove('pagination__button--current');\n  const currentBtn = document.querySelector(`[id=\"${a}\"]`);\n  currentBtn.classList.add('pagination__button--current');\n};\n\nconst onClickWatched = e => {\n  const watched = getWatchedList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, watched);\n};\n\nconst onClickQueue = e => {\n  const queue = getQueueList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, queue);\n};\n\nconst onClickLibrary = e => {\n  const library = getLibraryList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, library);\n};\n\n//====================render pagination for library============\n\nconst markupNumPage = pageCount => {\n  markupEmpty = [];\n\n  for (let i = 1; i <= pageCount; i++) {\n    let page = '';\n\n    if (i === 1) {\n      page = `<li class=\"pagination__item\">\n        <button class=\"pagination__button pagination__button--current\" id=\"${i}\">${i}</button>\n      </li>`;\n    } else {\n      page = `<li class=\"pagination__item\">\n        <button class=\"pagination__button\" id=\"${i}\">${i}</button>\n      </li>`;\n    }\n\n    markupEmpty.push(page);\n  }\n\n  const markup = markupEmpty.join('');\n\n  refs.paginationSet.innerHTML = '';\n  refs.paginationSet.insertAdjacentHTML('afterbegin', markup);\n};\n//==========================================\n\nexport { showLibraryPage, downloadLibraryPage };\n"],"names":["parcelRequire","$8nrFW","$9c5a8c3a213c0f0b$var$refs","cardSet","document","querySelector","showWatchedBtn","showQueueBtn","paginationSet","$9c5a8c3a213c0f0b$var$watchedSpinner","$9c5a8c3a213c0f0b$var$queueSpinner","$9c5a8c3a213c0f0b$var$pageCount","$9c5a8c3a213c0f0b$var$getWatchedList","JSON","parse","localStorage","getItem","$9c5a8c3a213c0f0b$var$getQueueList","$9c5a8c3a213c0f0b$var$getLibraryList","parsedWatchedMovies","parsedQueueMovies","$parcel$interopDefault","concat","filter","movie","movieIdx","movies","findIndex","item","id","indexOf","$9c5a8c3a213c0f0b$var$renderWatched","parsedMovieFromStorage","map","$9c5a8c3a213c0f0b$var$renderLibrary","poster_path","original_title","title","release_date","genres","vote_average","productionYear","Date","getFullYear","toString","alphabetGenres","idList","find","genre","name","$9c5a8c3a213c0f0b$var$getLibraryGenresById","i","genresMarkup","$dXyXQ","getGenresMarkup","markup","insertAdjacentHTML","classList","remove","$9c5a8c3a213c0f0b$var$getCountPages","arr","Math","ceil","length","addEventListener","add","removeEventListener","$9c5a8c3a213c0f0b$var$onClickLibrary","$9c5a8c3a213c0f0b$var$onClickQueue","watchedList","startPageWatched","slice","innerHTML","$9c5a8c3a213c0f0b$var$markupNumPage","$9c5a8c3a213c0f0b$var$onClickWatched","queueList","startPageQueue","$9c5a8c3a213c0f0b$var$renderByPage","a","arrayAllMoviesForRender","startPositionForRender","arrayMoviesByPage","splice","e","watched","getNumberPage","Number","target","closest","queue","library","pageCount1","markupEmpty","page","push","join","libraryList","startPageLibrary","showLibraryPage1"],"version":3,"file":"library.9153c2b3.js.map"}