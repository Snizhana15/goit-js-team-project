{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-15957d58de633e51.js","src/js/Api.js","src/js/change-button-condition.js","src/js/modal-film.js","src/js/localStorage.js","src/js/modal-students.js","node_modules/@parcel/runtime-js/lib/runtime-f3e67b2b70a377e8.js","src/js/render-popular-movies.js","src/js/render-library.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"1zJhX\\\":\\\"library.840dc334.js\\\",\\\"bJHJB\\\":\\\"movie.a3f3b783.jpg\\\"}\"));","const KEY = 'fadee9dfff8cb6b1bff36771479589d6';\n\n/*\nФункцию getPopularMovies() используем для запроса при рендере карточек популярных фильмов на главной странице.\n*/\n\nexport function getPopularMovies(pageNumber = 1) {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}&page=${pageNumber}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMoviesBySearchQuery(searchQuery) используем для запроса при рендере карточек при поиске по ключевому слову.\nПараметр searchQuery должен быть строкой из input-а поиска.\n*/\n\nexport function getSearchQuery(searchQuery, pageNumber = 1) {\n  const url = 'https://api.themoviedb.org/3';\n  return fetch(\n    `${url}/search/movie?api_key=${KEY}&query=${searchQuery}&language=eng&page=${pageNumber}&include_adult=false`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMovieById(id) используем для запроса при отображении полной информации о фильме (модалка при клике на карточку).\nПараметр id должен быть строкой или числом. \n*/\n\nexport function getMovieById(id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=eng`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nЖанры каждого фильма хранятся в виде массива чисел. Кажое число соответствует своему жанру. \nФункция getGenreList() возвращает массив объектов, свойствами которых есть число и соответствующий ему жанр.\nИспользуем при отображении жанров на карточках и модалке.\n*/\n\nexport function getGenreList() {\n  return fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=eng`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n","const changeWatchedButtonCondition = (filmId, watchedBtn) => {\n  const getWatched = localStorage.getItem('watched');\n  const parsGetWatched = JSON.parse(getWatched);\n\n  if (!parsGetWatched) {\n    return;\n  } else if (parsGetWatched.includes(filmId)) {\n    watchedBtn.textContent = 'in watched';\n    watchedBtn.style.backgroundColor = 'lightgray';\n    watchedBtn.setAttribute('disabled', '');\n  }\n};\n\nconst changeQueueButtonCondition = (filmId, queueBtn) => {\n  const getQueue = localStorage.getItem('queue');\n  const parseGetQueue = JSON.parse(getQueue);\n\n  if (!parseGetQueue) {\n    return;\n  } else if (parseGetQueue.includes(filmId)) {\n    queueBtn.textContent = 'in queue';\n    queueBtn.style.backgroundColor = 'lightgray';\n    queueBtn.setAttribute('disabled', '');\n  }\n};\n\nexport { changeWatchedButtonCondition, changeQueueButtonCondition };\n","import { getMovieById } from './Api';\nimport {\n  changeWatchedButtonCondition,\n  changeQueueButtonCondition,\n} from './change-button-condition';\n\nconst refs = {\n  openModalFilm: document.querySelector('.card-set'),\n  closeModalFilm: document.querySelector('.film-card__button-close'),\n  body: document.querySelector('body'),\n  backdropModalFilm: document.querySelector('.backdrop'),\n  modalFilm: document.querySelector('.film-card__box'),\n};\nconst spinModal = document.querySelector('.spinner--modal');\n\nconst onOpenModal = async e => {\n  spinModal.classList.add('spinner');\n  if (!e.target.closest('.card-set__item')) {\n    return;\n  }\n\n  refs.modalFilm.innerHTML = '';\n  refs.backdropModalFilm.classList.remove('visually-hidden');\n  refs.body.style.overflow = 'hidden';\n\n  const getFilmId = e.target.closest('.card-set__item').dataset.id;\n\n  const infoAboutModalFilm = await getMovieById(getFilmId);\n\n  renderModalFilm(infoAboutModalFilm);\n\n  const watchedBtn = document.querySelector('.description-button__watched');\n  const queueBtn = document.querySelector('.description-button__queue');\n  changeWatchedButtonCondition(getFilmId, watchedBtn);\n  changeQueueButtonCondition(getFilmId, queueBtn);\n\n  spinModal.classList.remove('spinner');\n\n  refs.body.addEventListener('keydown', onKeyPress);\n  refs.backdropModalFilm.addEventListener('click', onBackdropClick);\n};\n\nconst renderModalFilm = modalFilm => {\n  const {\n    poster_path,\n    title,\n    id,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    genres,\n    overview,\n  } = modalFilm;\n\n  const genresList = genres.map(item => item.name).join(', ');\n\n  const markupModalFilm = `<div class=\"film-card__image-block\">\n      <img\n        class=\"film-card__image\"\n        src=\"https://image.tmdb.org/t/p/original${poster_path}\"\n        alt=\"film\"\n      />\n    </div>\n    <div class=\"film-card__description\">\n      <h1 class=\"film-card__description-title\">${title}</h1>\n      <ul class=\"film-card__description-set\">\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Vote / Votes</p>\n          <p class=\"description-set__value\">\n            <span class=\"description-set__rating\">${vote_average}</span>\n            <span class=\"description-set__separator\">/</span>\n            <span class=\"description-set__vote\">${vote_count}</span>\n          </p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Popularity</p>\n          <p class=\"description-set__value\">${popularity}</p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Original Title</p>\n          <p class=\"description-set__value\">${original_title}</p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Genre</p>\n          <p class=\"description-set__value\">${genresList}</p>\n        </li>\n      </ul>\n      <div class=\"film-card__description-about\">\n        <h2 class=\"description-about__title\">About</h2>\n        <p class=\"description-about__text\">${overview}</p>\n      </div>\n      <div class=\"film-card__description-button\">\n        <button class=\"description-button description-button__watched\" data-id=\"${id}\">\n          add to Watched\n        </button>\n        <button class=\"description-button description-button__queue\" data-id=\"${id}\">\n          add to queue\n        </button>\n      </div>\n    </div>\n  </div>`;\n\n  refs.modalFilm.insertAdjacentHTML('beforeend', markupModalFilm);\n};\n\nconst onKeyPress = e => {\n  if (e.code === 'Escape') {\n    console.log(e.code);\n    refs.backdropModalFilm.classList.add('visually-hidden');\n    refs.body.style.overflow = 'visible';\n    refs.body.removeEventListener('keydown', onKeyPress);\n  }\n};\n\nconst onBackdropClick = e => {\n  if (e.target.closest('.film-card')) {\n    return;\n  }\n  refs.backdropModalFilm.classList.add('visually-hidden');\n  refs.body.style.overflow = 'visible';\n};\n\nrefs.openModalFilm.addEventListener('click', onOpenModal);\n\nrefs.closeModalFilm.addEventListener('click', () => {\n  refs.backdropModalFilm.classList.add('visually-hidden');\n  refs.body.style.overflow = 'visible';\n});\n","const cardBox = document.querySelector('.film-card__box');\ncardBox.addEventListener('click', addWatched);\ncardBox.addEventListener('click', addQueue);\nfunction addWatched(e) {\n  if (!e.target.closest('.description-button__watched')) {\n    return;\n  }\n  const getFilmId = e.target.closest('.description-button__watched').dataset.id;\n  const films = JSON.parse(localStorage.getItem('watched') || '[]');\n  const film = getFilmId;\n  const watchedBtn = e.target.closest('.description-button__watched');\n  if (films.includes(film)) {\n    return;\n  }\n  watchedBtn.textContent = 'in watched';\n  watchedBtn.style.backgroundColor = 'lightgray';\n  watchedBtn.setAttribute('disabled', '');\n  films.push(film);\n  localStorage.setItem('watched', JSON.stringify(films));\n}\nfunction addQueue(e) {\n  if (!e.target.closest('.description-button__queue')) {\n    return;\n  }\n  const getFilmId = e.target.closest('.description-button__queue').dataset.id;\n  const films = JSON.parse(localStorage.getItem('queue') || '[]');\n  const film = getFilmId;\n  const queueBtn = e.target.closest('.description-button__queue');\n  if (films.includes(film)) {\n    return;\n  }\n  queueBtn.textContent = 'in queue';\n  queueBtn.style.backgroundColor = 'lightgray';\n  queueBtn.setAttribute('disabled', '');\n  films.push(film);\n  localStorage.setItem('queue', JSON.stringify(films));\n}\n","const refs = {\n  openModalHeart: document.querySelector('.heart'),\n  openModalBtn: document.querySelector('[data-modal-opens]'),\n  modal: document.querySelector('[data-modals]'),\n  body: document.querySelector('body'),\n};\nfunction toggleModal() {\n  refs.modal.classList.remove('is-hiddens');\n  document.body.classList.add('modal-open');\n  function onKeyPress(event) {\n    if (event.code === 'Escape') {\n      refs.modal.classList.add('is-hiddens');\n      document.body.classList.remove('modal-open');\n      refs.body.removeEventListener('keyup', onKeyPress);\n    }\n  }\n  function onGalleryClick(event) {\n    if (event.target.closest('.modals')) return;\n    refs.modal.classList.add('is-hiddens');\n    document.body.classList.remove('modal-open');\n    refs.modal.removeEventListener('click', onGalleryClick);\n  }\n  refs.body.addEventListener('keyup', onKeyPress);\n  refs.modal.addEventListener('click', onGalleryClick);\n}\nrefs.openModalBtn.addEventListener('click', toggleModal);\nrefs.openModalHeart.addEventListener('click', toggleModal);\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"bJHJB\")).toString();","import { getPopularMovies, getGenreList } from './Api';\nimport * as image from '../images/movie.jpg';\n\nconst cardSet = document.querySelector('.card-set');\nconst spinner = document.getElementById('spinner');\n\nasync function getGenres() {\n  try {\n    const { genres } = await getGenreList();\n    return genres;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function getDataAboutPopularMovies(pageNumber) {\n  try {\n    const { results: movies, total_pages: totalPages } = await getPopularMovies(\n      pageNumber\n    );\n    return { movies, totalPages };\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function renderPopularMovies(pageNumber) {\n  let genres = null;\n\n  spinner.classList.add('spinner');\n\n  if (!localStorage.getItem('genres')) {\n    genres = await getGenres();\n    localStorage.setItem('genres', JSON.stringify(genres));\n  } else {\n    genres = JSON.parse(localStorage.getItem('genres'));\n  }\n\n  const { movies, totalPages } = await getDataAboutPopularMovies(pageNumber);\n\n  const cardsMarkup = movies\n    .map(movie => renderMovieCard(movie, genres))\n    .join('');\n\n  cardSet.innerHTML = '';\n  cardSet.insertAdjacentHTML('afterbegin', cardsMarkup);\n  spinner.classList.remove('spinner');\n  return totalPages;\n}\n\nfunction getGenresById(idList, genres) {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n}\n\nfunction getGenresMarkup(genres) {\n  let genresMarkup = '';\n\n  switch (genres.length) {\n    case 0:\n      genresMarkup = `<li class=\"card-set__genre-movie\">Genre's list is empty</li>`;\n      break;\n\n    case 1:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]}</li>`;\n      break;\n\n    case 2:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]}</li>`;\n      break;\n\n    case 3:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[2]}</li>`;\n      break;\n\n    default:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">Other</li>`;\n  }\n\n  return genresMarkup;\n}\n\nfunction renderMovieCard(movie, genres) {\n  const { genre_ids, original_title, id, release_date, title, poster_path } =\n    movie;\n\n  const alphabetGenres = getGenresById(genre_ids, genres);\n  const genresMarkup = getGenresMarkup(alphabetGenres);\n  const productionYear = release_date\n    ? new Date(release_date).getFullYear().toString()\n    : 'Unknown';\n  const posterPath = poster_path\n    ? `https://image.tmdb.org/t/p/original${poster_path}`\n    : `${image}`;\n\n  return `\n        <li class=\"card-set__item\" data-id=\"${id}\">\n            <div class=\"card-set__box-img\">\n            <img\n                loading=\"lazy\"\n                src=\"${posterPath}\"\n                alt=\"${original_title}\"\n                class=\"card-set__img\"\n                \n            />\n            </div>\n            <h3 class=\"card-set__title\">${title}</h3>\n            <div class=\"card-set__description\">\n            <ul class=\"card-set__genre\">\n                ${genresMarkup}\n            </ul>\n            <span class=\"card-set__genre-movie\">&nbsp| ${productionYear}</span>\n            </div>\n        </li>`;\n}\n\nexport { renderPopularMovies, getGenresMarkup };\n","import { getMovieById } from './Api';\nimport { getGenresMarkup } from './render-popular-movies';\n\nconst refs = {\n  cardSet: document.querySelector('.card-set'),\n  showWatchedBtn: document.querySelector('.header-library__button--watched'),\n  showQueueBtn: document.querySelector('.header-library__button--queue'),\n  paginationSet: document.querySelector('.pagination'),\n};\n\nconst watchedSpinner = document.querySelector(\n  '.header-library--watched--spinner'\n);\nconst queueSpinner = document.querySelector('.header-library--queue--spinner');\n\nlet pageCount = 0;\nconst moviesbyPage = 10;\n\nconst getWatchedList = () => {\n  const parsedWatchedMovies = JSON.parse(\n    localStorage.getItem('watched') || '[]'\n  );\n  return parsedWatchedMovies;\n};\n\nconst getQueueList = () => {\n  const parsedQueueMovies = JSON.parse(localStorage.getItem('queue') || '[]');\n  return parsedQueueMovies;\n};\n\nconst getLibraryList = () => {\n  const parsedWatchedMovies = JSON.parse(\n    localStorage.getItem('watched') || '[]'\n  );\n\n  const parsedQueueMovies = JSON.parse(localStorage.getItem('queue') || '[]');\n\n  const parsedAllMoeviesList = [...parsedWatchedMovies, ...parsedQueueMovies];\n  const parsedUniqueMoeviesList = parsedAllMoeviesList.filter(\n    (value, index, arr) => arr.indexOf(value) === index\n  );\n  return parsedUniqueMoeviesList;\n};\n\nconst onShowWatched = () => {\n  watchedSpinner.classList.add('spinner');\n\n  refs.paginationSet.removeEventListener('click', onClickLibrary);\n  refs.paginationSet.removeEventListener('click', onClickQueue);\n\n  const watchedList = getWatchedList();\n\n  const startPageWatched = watchedList.slice(0, moviesbyPage);\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(watchedList);\n  renderWatched(startPageWatched);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickWatched);\n};\n\nconst onShowQueue = () => {\n  queueSpinner.classList.add('spinner');\n\n  refs.paginationSet.removeEventListener('click', onClickLibrary);\n  refs.paginationSet.removeEventListener('click', onClickWatched);\n\n  const queueList = getQueueList();\n  const startPageQueue = queueList.slice(0, moviesbyPage);\n\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(queueList);\n  renderWatched(startPageQueue);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickQueue);\n};\n\nconst showLibraryPage = () => {\n  refs.paginationSet.removeEventListener('click', onClickWatched);\n  refs.paginationSet.removeEventListener('click', onClickQueue);\n\n  const libraryList = getLibraryList();\n\n  const startPageLibrary = libraryList.slice(0, moviesbyPage);\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(libraryList);\n  renderWatched(startPageLibrary);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickLibrary);\n};\n\nconst renderWatched = async parsedMovieFromStorage => {\n  const getMovies = await parsedMovieFromStorage.map(moevieId =>\n    getMovieById(moevieId).then(response => renderLibrary(response))\n  );\n};\n\nconst getLibraryGenresById = (idList, genres) => {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n};\n\nconst renderLibrary = movies => {\n  const {\n    id,\n    poster_path,\n    original_title,\n    title,\n    release_date,\n    genres,\n    vote_average,\n  } = movies;\n\n  const productionYear = new Date(release_date).getFullYear().toString();\n\n  const idList = genres.map(i => (i = i.id));\n\n  const alphabetGenres = getLibraryGenresById(idList, genres);\n\n  const genresMarkup = getGenresMarkup(alphabetGenres);\n\n  const markup = `<li class=\"card-set__item\" data-id=\"${id}\">\n                <div class=\"card-set__box-img\"\">\n                <img src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${original_title}\"\n                class=\"card-set__img\"\n                />\n                </div>\n                <h3 class=\"card-set__title\">${title}</h3>\n                <div class=\"card-set__description\">\n                <ul class=\"card-set__genre\">\n                    ${genresMarkup}\n                </ul>\n                    <span class=\"card-set__production-year\">&nbsp| ${productionYear}&nbsp</span>\n                    <span class=\"card-set__rating\">${vote_average}</span>\n                </div>\n                </li>`;\n\n  refs.cardSet.insertAdjacentHTML('afterbegin', markup);\n  watchedSpinner.classList.remove('spinner');\n  queueSpinner.classList.remove('spinner');\n};\n\nconst getCountPages = arr => {\n  pageCount = Math.ceil(arr.length / moviesbyPage);\n};\n\nconst downloadLibraryPage = showLibraryPage => {\n  showLibraryPage();\n};\n\nrefs.showWatchedBtn.addEventListener('click', onShowWatched);\nrefs.showQueueBtn.addEventListener('click', onShowQueue);\n\nconst renderByPage = (a, arrayAllMoviesForRender) => {\n  const startPositionForRender = a * moviesbyPage - moviesbyPage;\n\n  const arrayMoviesByPage = arrayAllMoviesForRender.splice(\n    startPositionForRender,\n    moviesbyPage\n  );\n\n  refs.cardSet.innerHTML = '';\n  renderWatched(arrayMoviesByPage);\n  markupNumPage(pageCount);\n};\n\nconst onClickWatched = e => {\n  const watched = getWatchedList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, watched);\n};\n\nconst onClickQueue = e => {\n  const queue = getQueueList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, queue);\n};\n\nconst onClickLibrary = e => {\n  const library = getLibraryList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n  btn = e.target.closest('.pagination__button');\n  console.log(btn);\n  btn.classList.add('pagination__button--current');\n\n  renderByPage(getNumberPage, library);\n};\n\n//====================render pagination for library============\n\nconst markupNumPage = pageCount => {\n  markupEmpty = [];\n\n  for (let i = 1; i <= pageCount; i++) {\n    const page = `<li class=\"pagination__item\">\n        <button class=\"pagination__button\" id=\"${i}\">${i}</button>\n      </li>`;\n\n    markupEmpty.push(page);\n  }\n\n  const markup = markupEmpty.join('');\n\n  refs.paginationSet.innerHTML = '';\n  refs.paginationSet.insertAdjacentHTML('afterbegin', markup);\n};\n//==========================================\n\nexport { showLibraryPage, downloadLibraryPage };\n"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$a7e0245fb0110520$export$e05fa48ccab9af8","fetch","then","response","json","data","_success","success","status_message","$b6f31b61c48869a0$export$a1c83784b50cc96","filmId","watchedBtn","getWatched","localStorage","getItem","parsGetWatched","includes","textContent","style","backgroundColor","setAttribute","$b6f31b61c48869a0$export$f5b843a319935072","queueBtn","getQueue","parseGetQueue","$b89ac968f8ae7162$var$refs","openModalFilm","document","querySelector","closeModalFilm","body","backdropModalFilm","modalFilm","$b89ac968f8ae7162$var$spinModal","$b89ac968f8ae7162$var$renderModalFilm","poster_path","title","vote_average","vote_count","popularity","original_title","genres","overview","markupModalFilm","map","item","name","join","insertAdjacentHTML","$b89ac968f8ae7162$var$onKeyPress","e","code","console","log","classList","add","overflow","removeEventListener","$b89ac968f8ae7162$var$onBackdropClick","target","closest","addEventListener","async","innerHTML","remove","getFilmId","dataset","infoAboutModalFilm","$2338c8cd734f85a6$var$cardBox","films","film","push","setItem","stringify","$8e415dd749dd7be8$var$refs","openModalHeart","openModalBtn","modal","$8e415dd749dd7be8$var$toggleModal","onKeyPress","event","onGalleryClick","URL","resolve","import","meta","url","toString","getElementById","$696ffb40b89ad88b$export$8d9a840d23167eac","genresMarkup","$76d8f5d523e840d5$var$refs","cardSet","showWatchedBtn","showQueueBtn","paginationSet","$76d8f5d523e840d5$var$watchedSpinner","$76d8f5d523e840d5$var$queueSpinner","$76d8f5d523e840d5$var$pageCount","$76d8f5d523e840d5$var$getWatchedList","$76d8f5d523e840d5$var$getQueueList","$76d8f5d523e840d5$var$getLibraryList","filter","value","index","arr","indexOf","$76d8f5d523e840d5$var$renderWatched","parsedMovieFromStorage","moevieId","$76d8f5d523e840d5$var$renderLibrary","movies","release_date","productionYear","Date","getFullYear","alphabetGenres","idList","find","genre","$76d8f5d523e840d5$var$getLibraryGenresById","markup","$76d8f5d523e840d5$var$getCountPages","Math","ceil","$76d8f5d523e840d5$var$onClickLibrary","$76d8f5d523e840d5$var$onClickQueue","watchedList","startPageWatched","slice","$76d8f5d523e840d5$var$markupNumPage","$76d8f5d523e840d5$var$onClickWatched","queueList","startPageQueue","$76d8f5d523e840d5$var$renderByPage","a","arrayAllMoviesForRender","startPositionForRender","arrayMoviesByPage","splice","watched","getNumberPage","Number","queue","library","btn","pageCount1","markupEmpty","page","libraryList","startPageLibrary","showLibraryPage1"],"version":3,"file":"library.840dc334.js.map"}