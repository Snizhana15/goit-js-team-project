{"mappings":"AAMO,SAASA,EAAiBC,EAAa,GAC5C,OAAOC,MACL,iGAAuED,KAEtEE,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,I,IACEC,EAAN,GAAkB,QAAZA,EAAAD,EAAKE,eAAO,IAAZD,MACJ,MAAM,IAAIE,MAAMH,EAAKI,gBAEvB,OAAOJ,KCbb,MAAMK,EAAUC,SAASC,cAAc,aAEvCC,eAAeC,IACb,IACE,MAAMC,OAAEA,SDwDHd,MACL,sGAECC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,I,IACEC,EAAN,GAAkB,QAAZA,EAAAD,EAAKE,eAAO,IAAZD,MACJ,MAAM,IAAIE,MAAMH,EAAKI,gBAEvB,OAAOJ,KC/DT,OAAOU,EACP,MAAOC,GACPC,MAAMD,IAIVH,eAAeK,EAA0BlB,GACvC,IACE,MAAMmB,QAAEA,SAAkBpB,EAAiBC,GAC3C,OAAOmB,EACP,MAAOH,GACPC,MAAMD,KAIVH,eAAmCb,GACjC,MAAMe,QAAeD,IAGfM,SAFeF,EAA0BlB,IAG5CqB,KAAIC,GAiCT,SAAyBA,EAAOP,GAC9B,MAAMQ,UAAEA,EAASC,eAAEA,EAAcC,GAAEA,EAAEC,aAAEA,EAAYC,MAAEA,EAAKC,YAAEA,GAC1DN,EAGIO,EA3BR,SAAwBd,GACtB,IAAIc,EAAe,GAEnB,OAAQd,EAAOe,QACb,KAAK,EACHD,EAAe,qCAAqCd,EAAO,UAC3D,MAEF,KAAK,EACHc,EAAe,qCAAqCd,EAAO,0EACPA,EAAO,UAC3D,MAEF,QACEc,EAAe,qCAAqCd,EAAO,0EACPA,EAAO,mFAI/D,OAAOc,EAQcE,CA/BvB,SAAuBC,EAAQjB,GAC7B,OAAOiB,EAAOX,KAAII,GAAMV,EAAOkB,MAAKC,GAASA,EAAMT,KAAOA,IAAIU,OA6BvCC,CAAcb,EAAWR,IAE1CsB,EAAiB,IAAIC,KAAKZ,GAAca,cAAcC,WAE5D,MAAO,iDACqCf,+JAIYG,4BACnCJ,4IAKmBG,sHAGxBE,gFAEuCQ,8CAzDvCI,CAAgBnB,EAAOP,KACpC2B,KAAK,IAERhC,EAAQiC,UAAY,GACpBjC,EAAQkC,mBAAmB,aAAcxB,GCzB3C","sources":["src/js/Api.js","src/js/render-popular-movies.js","src/index.js"],"sourcesContent":["const KEY = 'fadee9dfff8cb6b1bff36771479589d6';\n\n/*\nФункцию getPopularMovies() используем для запроса при рендере карточек популярных фильмов на главной странице.\n*/\n\nexport function getPopularMovies(pageNumber = 1) {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}&page=${pageNumber}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMoviesBySearchQuery(searchQuery) используем для запроса при рендере карточек при поиске по ключевому слову.\nПараметр searchQuery должен быть строкой из input-а поиска.\n*/\n\nexport function getMoviesBySearchQuery(searchQuery) {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${searchQuery}&language=uk&page=1&include_adult=false`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMovieById(id) используем для запроса при отображении полной информации о фильме (модалка при клике на карточку).\nПараметр id должен быть строкой или числом. \n*/\n\nexport function getMovieById(id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=uk`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nЖанры каждого фильма хранятся в виде массива чисел. Кажое число соответствует своему жанру. \nФункция getGenreList() возвращает массив объектов, свойствами которых есть число и соответствующий ему жанр.\nИспользуем при отображении жанров на карточках и модалке.\n*/\n\nexport function getGenreList() {\n  return fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=uk`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n","import { getPopularMovies, getGenreList } from './Api';\n\nconst cardSet = document.querySelector('.card-set');\n\nasync function getGenres() {\n  try {\n    const { genres } = await getGenreList();\n    return genres;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function getDataAboutPopularMovies(pageNumber) {\n  try {\n    const { results } = await getPopularMovies(pageNumber);\n    return results;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function renderPopularMovies(pageNumber) {\n  const genres = await getGenres();\n  const movies = await getDataAboutPopularMovies(pageNumber);\n\n  const cardsMarkup = movies\n    .map(movie => renderMovieCard(movie, genres))\n    .join('');\n\n  cardSet.innerHTML = '';\n  cardSet.insertAdjacentHTML('afterbegin', cardsMarkup);\n}\n\nfunction getGenresById(idList, genres) {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n}\n\nfunction getGenresMarup(genres) {\n  let genresMarkup = '';\n\n  switch (genres.length) {\n    case 1:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]}</li>`;\n      break;\n\n    case 2:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]}</li>`;\n      break;\n\n    default:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">Інші</li>`;\n  }\n\n  return genresMarkup;\n}\n\nfunction renderMovieCard(movie, genres) {\n  const { genre_ids, original_title, id, release_date, title, poster_path } =\n    movie;\n\n  const alphabetGenres = getGenresById(genre_ids, genres);\n  const genresMarkup = getGenresMarup(alphabetGenres);\n  const productionYear = new Date(release_date).getFullYear().toString();\n\n  return `\n        <li class=\"card-set__item\" data-id=\"${id}\">\n            <div class=\"card-set__box-img\">\n            <img\n                loading=\"lazy\"\n                src=\"https://image.tmdb.org/t/p/original${poster_path}\"\n                alt=\"${original_title}\"\n                class=\"card-set__img\"\n                \n            />\n            </div>\n            <h3 class=\"card-set__title\">${title}</h3>\n            <div class=\"card-set__description\">\n            <ul class=\"card-set__genre\">\n                ${genresMarkup}\n            </ul>\n            <span class=\"card-set__genre-movie\">&nbsp| ${productionYear}</span>\n            </div>\n        </li>`;\n}\n\nexport { renderPopularMovies };\n","import { renderPopularMovies } from './js/render-popular-movies';\n\n/*\nПока что, чтобы посмотреть работает ли пагинация достаточно в функцию renderPopularMovies передать номер страницы в качестве параметра, например renderPopularMovies(3)\n*/\n\nrenderPopularMovies();\n"],"names":["$a7e0245fb0110520$export$76bd8a7b840a3729","pageNumber","fetch","then","response","json","data","_success","success","Error","status_message","$696ffb40b89ad88b$var$cardSet","document","querySelector","async","$696ffb40b89ad88b$var$getGenres","genres","error","alert","$696ffb40b89ad88b$var$getDataAboutPopularMovies","results","cardsMarkup","map","movie","genre_ids","original_title","id","release_date","title","poster_path","genresMarkup","length","$696ffb40b89ad88b$var$getGenresMarup","idList","find","genre","name","$696ffb40b89ad88b$var$getGenresById","productionYear","Date","getFullYear","toString","$696ffb40b89ad88b$var$renderMovieCard","join","innerHTML","insertAdjacentHTML"],"version":3,"file":"index.ea8b0cf1.js.map"}