{"mappings":"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","sources":["src/js/Api.js","src/js/render-popular-movies.js","src/js/change-movies-page.js","src/js/modal-film.js","src/index.js"],"sourcesContent":["const KEY = 'fadee9dfff8cb6b1bff36771479589d6';\n\n/*\nФункцию getPopularMovies() используем для запроса при рендере карточек популярных фильмов на главной странице.\n*/\n\nexport function getPopularMovies(pageNumber = 1) {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}&page=${pageNumber}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMoviesBySearchQuery(searchQuery) используем для запроса при рендере карточек при поиске по ключевому слову.\nПараметр searchQuery должен быть строкой из input-а поиска.\n*/\n\nexport function getMoviesBySearchQuery(searchQuery, pageNumber = 1) {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${searchQuery}&language=uk&page=${pageNumber}&include_adult=false`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMovieById(id) используем для запроса при отображении полной информации о фильме (модалка при клике на карточку).\nПараметр id должен быть строкой или числом. \n*/\n\nexport function getMovieById(id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=uk`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nЖанры каждого фильма хранятся в виде массива чисел. Кажое число соответствует своему жанру. \nФункция getGenreList() возвращает массив объектов, свойствами которых есть число и соответствующий ему жанр.\nИспользуем при отображении жанров на карточках и модалке.\n*/\n\nexport function getGenreList() {\n  return fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=uk`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n","import { getPopularMovies, getGenreList } from './Api';\n\nconst cardSet = document.querySelector('.card-set');\n\nasync function getGenres() {\n  try {\n    const { genres } = await getGenreList();\n    return genres;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function getDataAboutPopularMovies(pageNumber) {\n  try {\n    const { results: movies, total_pages: totalPages } = await getPopularMovies(\n      pageNumber\n    );\n    return { movies, totalPages };\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function renderPopularMovies(pageNumber) {\n  const genres = await getGenres();\n  const { movies, totalPages } = await getDataAboutPopularMovies(pageNumber);\n\n  const cardsMarkup = movies\n    .map(movie => renderMovieCard(movie, genres))\n    .join('');\n\n  cardSet.innerHTML = '';\n  cardSet.insertAdjacentHTML('afterbegin', cardsMarkup);\n\n  return totalPages;\n}\n\nfunction getGenresById(idList, genres) {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n}\n\nfunction getGenresMarkup(genres) {\n  let genresMarkup = '';\n\n  switch (genres.length) {\n    case 1:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]}</li>`;\n      break;\n\n    case 2:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]}</li>`;\n      break;\n\n    case 3:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[2]}</li>`;\n      break;\n\n    default:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">Інші</li>`;\n  }\n\n  return genresMarkup;\n}\n\nfunction renderMovieCard(movie, genres) {\n  const { genre_ids, original_title, id, release_date, title, poster_path } =\n    movie;\n\n  const alphabetGenres = getGenresById(genre_ids, genres);\n  const genresMarkup = getGenresMarkup(alphabetGenres);\n  const productionYear = new Date(release_date).getFullYear().toString();\n\n  return `\n        <li class=\"card-set__item\" data-id=\"${id}\">\n            <div class=\"card-set__box-img\">\n            <img\n                loading=\"lazy\"\n                src=\"https://image.tmdb.org/t/p/original${poster_path}\"\n                alt=\"${original_title}\"\n                class=\"card-set__img\"\n                \n            />\n            </div>\n            <h3 class=\"card-set__title\">${title}</h3>\n            <div class=\"card-set__description\">\n            <ul class=\"card-set__genre\">\n                ${genresMarkup}\n            </ul>\n            <span class=\"card-set__genre-movie\">&nbsp| ${productionYear}</span>\n            </div>\n        </li>`;\n}\n\nexport { renderPopularMovies };\n","let pageNumber = 1;\n\nconst backwardBtn = document.querySelector('[data-move=\"backward\"]');\nconst forwardBtn = document.querySelector('[data-move=\"forward\"]');\nconst pageNumberList = document.querySelector('.number-page');\nconst cardSet = document.querySelector('.card-set');\n\n/*\n  Функция changeMoviesPage принимает в качестве первого аргумента общее количество страниц, доступных для пагинации, а в качестве второго - функцию для рендера карточек фильмов.\n*/\n\nfunction changeMoviesPage(totalPages, renderMovies) {\n  renderStartPageNumberList(totalPages);\n\n  backwardBtn.addEventListener('click', onBackwardBtnClick);\n  forwardBtn.addEventListener('click', onForwardBtnClick);\n  pageNumberList.addEventListener('click', onPageNumberClick);\n\n  function onForwardBtnClick() {\n    pageNumber += 1;\n    renderMovies(pageNumber);\n    cardSet.scrollIntoView();\n\n    activateBtn(backwardBtn);\n    if (pageNumber === totalPages) {\n      deactivateBtn(forwardBtn);\n    }\n\n    if (pageNumber < 4) {\n      changeCurrentBtnOnStart();\n      return;\n    }\n\n    if (pageNumber > totalPages - 3) {\n      hideLastPageNumberListElement();\n      changeCurrentBtnOnEnd();\n    }\n\n    if (pageNumber >= 4 && pageNumber <= totalPages - 2) {\n      showFirstPageNumberListElement();\n      setNewBtnPageNumbers();\n    }\n  }\n\n  function onBackwardBtnClick() {\n    pageNumber -= 1;\n    renderMovies(pageNumber);\n    cardSet.scrollIntoView();\n\n    activateBtn(forwardBtn);\n    if (pageNumber === 1) {\n      deactivateBtn(backwardBtn);\n    }\n\n    if (pageNumber > totalPages - 3) {\n      changeCurrentBtnOnEnd();\n      return;\n    }\n\n    if (pageNumber < 4) {\n      hideFirstPageNumberListElement();\n      changeCurrentBtnOnStart();\n    }\n\n    if (pageNumber >= 3 && pageNumber <= totalPages - 3) {\n      showLastPageNumberListElement();\n      setNewBtnPageNumbers();\n    }\n  }\n\n  function onPageNumberClick(e) {\n    if (e.target.nodeName !== 'BUTTON') {\n      return;\n    }\n\n    if (e.target.classList.contains('number-page__btn--current')) {\n      return;\n    }\n\n    pageNumber = Number(e.target.textContent);\n    renderMovies(pageNumber);\n    cardSet.scrollIntoView();\n\n    if (pageNumber === 1) {\n      removeCurrentBtnClass();\n      renderStartPageNumberList();\n      return;\n    }\n\n    if (pageNumber === totalPages) {\n      removeCurrentBtnClass();\n      renderEndPageNumberList();\n      return;\n    }\n\n    if (pageNumber >= 4 && pageNumber <= totalPages - 3) {\n      removeCurrentBtnClass();\n      pageNumberList.children[3].firstElementChild.classList.add(\n        'number-page__btn--current'\n      );\n\n      showFirstPageNumberListElement();\n      showLastPageNumberListElement();\n\n      activateBtn(forwardBtn);\n      activateBtn(backwardBtn);\n\n      setNewBtnPageNumbers();\n    }\n\n    if (pageNumber < 4) {\n      changeCurrentBtnOnStart();\n\n      hideFirstPageNumberListElement();\n      if (totalPages > 5) {\n        showLastPageNumberListElement();\n      }\n\n      activateBtn(forwardBtn);\n\n      setNewBtnPageNumbersOnStart();\n      return;\n    }\n\n    if (pageNumber > totalPages - 3) {\n      changeCurrentBtnOnEnd();\n\n      hideLastPageNumberListElement();\n      if (totalPages > 5) {\n        showFirstPageNumberListElement();\n      }\n\n      activateBtn(forwardBtn);\n      activateBtn(backwardBtn);\n\n      setNewBtnPageNumbersOnEnd();\n    }\n  }\n\n  function activateBtn(btnLink) {\n    btnLink.removeAttribute('disabled');\n    btnLink.classList.remove('movies-navigation__arrow-btn--disabled');\n  }\n\n  function deactivateBtn(btnLink) {\n    btnLink.setAttribute('disabled', '');\n    btnLink.classList.add('movies-navigation__arrow-btn--disabled');\n  }\n\n  function renderStartPageNumberList() {\n    if (totalPages < 6) {\n      renderSmallPageNumberList();\n      return;\n    }\n\n    hideFirstPageNumberListElement();\n    showLastPageNumberListElement();\n\n    pageNumberList.children[1].firstElementChild.classList.add(\n      'number-page__btn--current'\n    );\n    pageNumberList.lastElementChild.firstElementChild.textContent =\n      String(totalPages);\n\n    deactivateBtn(backwardBtn);\n    activateBtn(forwardBtn);\n\n    setNewBtnPageNumbersOnStart();\n  }\n\n  function renderEndPageNumberList() {\n    hideLastPageNumberListElement();\n    if (totalPages > 5) {\n      showFirstPageNumberListElement();\n    }\n\n    pageNumberList.children[\n      totalPages >= 5 ? 5 : totalPages\n    ].firstElementChild.classList.add('number-page__btn--current');\n\n    activateBtn(backwardBtn);\n    deactivateBtn(forwardBtn);\n\n    if (totalPages <= 5) {\n      setNewBtnPageNumbersOnStart();\n      return;\n    }\n    setNewBtnPageNumbersOnEnd();\n  }\n\n  function removeCurrentBtnClass() {\n    const currentBtn = document.querySelector('.number-page__btn--current');\n    currentBtn.classList.remove('number-page__btn--current');\n  }\n\n  function changeCurrentBtnOnStart() {\n    removeCurrentBtnClass();\n    pageNumberList.children[pageNumber].firstElementChild.classList.add(\n      'number-page__btn--current'\n    );\n  }\n\n  function changeCurrentBtnOnEnd() {\n    removeCurrentBtnClass();\n    pageNumberList.children[\n      pageNumber - totalPages + 5\n    ].firstElementChild.classList.add('number-page__btn--current');\n  }\n\n  function renderSmallPageNumberList() {\n    hideArrowBtns();\n    renderSmallPageNumberListMarkup();\n\n    hideFirstPageNumberListElement();\n    hideLastPageNumberListElement();\n\n    pageNumberList.children[1].firstElementChild.classList.add(\n      'number-page__btn--current'\n    );\n  }\n\n  function hideLastPageNumberListElement() {\n    pageNumberList.lastElementChild.style.display = 'none';\n    pageNumberList.children[\n      pageNumberList.children.length - 2\n    ].style.marginRight = '0px';\n  }\n\n  function hideFirstPageNumberListElement() {\n    pageNumberList.firstElementChild.style.display = 'none';\n  }\n\n  function showFirstPageNumberListElement() {\n    pageNumberList.firstElementChild.style.display = 'list-item';\n  }\n\n  function showLastPageNumberListElement() {\n    pageNumberList.lastElementChild.style.display = 'list-item';\n    pageNumberList.children[\n      pageNumberList.children.length - 2\n    ].style.marginRight = '16px';\n  }\n\n  function setNewBtnPageNumbers() {\n    for (let i = 1; i < pageNumberList.children.length - 1; i += 1) {\n      const newPageNumber = pageNumber - 3 + i;\n      pageNumberList.children[i].firstElementChild.textContent =\n        newPageNumber.toString();\n    }\n  }\n\n  function setNewBtnPageNumbersOnStart() {\n    for (let i = 1; i < pageNumberList.children.length - 1; i += 1) {\n      const newPageNumber = i;\n      pageNumberList.children[i].firstElementChild.textContent =\n        newPageNumber.toString();\n    }\n  }\n\n  function setNewBtnPageNumbersOnEnd() {\n    for (let i = 1; i < pageNumberList.children.length - 1; i += 1) {\n      const newPageNumber = totalPages - 5 + i;\n      pageNumberList.children[i].firstElementChild.textContent =\n        newPageNumber.toString();\n    }\n  }\n\n  function renderSmallPageNumberListMarkup() {\n    let markup = '';\n    pageNumberList.innerHTML = '';\n    for (let i = 0; i < totalPages + 2; i += 1) {\n      markup += `<li class=\"number-page__item\">\n                <button type=\"button\" class=\"number-page__btn\">${i}</button>\n              </li>`;\n    }\n    pageNumberList.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  function hideArrowBtns() {\n    forwardBtn.style.display = 'none';\n    backwardBtn.style.display = 'none';\n  }\n}\n\nexport { changeMoviesPage };\n","import { getMovieById } from './Api';\n\nconst refs = {\n  openModalFilm: document.querySelector('.card-set'),\n  closeModalFilm: document.querySelector('.film-card__button-close'),\n  body: document.querySelector('body'),\n  backdropModalFilm: document.querySelector('.backdrop'),\n  modalFilm: document.querySelector('.film-card__box'),\n};\n\nconst onClick = async e => {\n  if (!e.target.closest('.card-set__item')) {\n    return;\n  }\n\n  refs.modalFilm.innerHTML = '';\n  refs.backdropModalFilm.classList.remove('visually-hidden');\n  refs.body.style.overflow = 'hidden';\n\n  const getFilmId = e.target.closest('.card-set__item').dataset.id;\n\n  const infoAboutModalFilm = await getMovieById(getFilmId);\n\n  renderModalFilm(infoAboutModalFilm);\n};\n\nconst renderModalFilm = modalFilm => {\n  const {\n    poster_path,\n    title,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    genres,\n    overview,\n  } = modalFilm;\n\n  const genresList = genres.map(item => item.name).join(', ');\n\n  const markupModalFilm = `<div class=\"film-card__image-block\">\n      <img\n        class=\"film-card__image\"\n        src=\"https://image.tmdb.org/t/p/original${poster_path}\"\n        alt=\"film\"\n      />\n    </div>\n    <div class=\"film-card__description\">\n      <h1 class=\"film-card__description-title\">${title}</h1>\n      <ul class=\"film-card__description-set\">\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Vote / Votes</p>\n          <p class=\"description-set__value\">\n            <span class=\"description-set__rating\">${vote_average}</span>\n            <span class=\"description-set__separator\">/</span>\n            <span class=\"description-set__vote\">${vote_count}</span>\n          </p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Popularity</p>\n          <p class=\"description-set__value\">${popularity}</p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Original Title</p>\n          <p class=\"description-set__value\">${original_title}</p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Genre</p>\n          <p class=\"description-set__value\">${genresList}</p>\n        </li>\n      </ul>\n      <div class=\"film-card__description-about\">\n        <h2 class=\"description-about__title\">About</h2>\n        <p class=\"description-about__text\">${overview}</p>\n      </div>\n      <div class=\"film-card__description-button\">\n        <button class=\"description-button description-button__watched\">\n          add to Watched\n        </button>\n        <button class=\"description-button description-button__queue\">\n          add to queue\n        </button>\n      </div>\n    </div>\n  </div>`;\n\n  refs.modalFilm.insertAdjacentHTML('beforeend', markupModalFilm);\n};\n\nrefs.openModalFilm.addEventListener('click', onClick);\n\nrefs.closeModalFilm.addEventListener('click', () => {\n  refs.backdropModalFilm.classList.add('visually-hidden');\n  refs.body.style.overflow = 'visible';\n});\n","import { renderPopularMovies } from './js/render-popular-movies';\nimport { changeMoviesPage } from './js/change-movies-page';\n\nasync function downloadMainHomePage() {\n  const totalPages = await renderPopularMovies();\n  changeMoviesPage(totalPages > 50 ? 50 : totalPages, renderPopularMovies);\n}\n\ndownloadMainHomePage();\n\n/*\nІмпорт всього файлу modal-film.js\n*/\n\nimport * as things from './js/modal-film';\n"],"names":["$a7e0245fb0110520$export$76bd8a7b840a3729","pageNumber","fetch","then","response","json","data","_success","success","Error","status_message","$696ffb40b89ad88b$var$cardSet","document","querySelector","async","$696ffb40b89ad88b$var$getGenres","genres","error","alert","$696ffb40b89ad88b$var$getDataAboutPopularMovies","results","movies","total_pages","totalPages","$696ffb40b89ad88b$export$12335c527465096d","cardsMarkup","map","movie","genre_ids","original_title","id","release_date","title","poster_path","genresMarkup","length","$696ffb40b89ad88b$var$getGenresMarkup","idList","find","genre","name","$696ffb40b89ad88b$var$getGenresById","productionYear","Date","getFullYear","toString","$696ffb40b89ad88b$var$renderMovieCard","join","innerHTML","insertAdjacentHTML","$1c72f1042fbd7648$var$pageNumber","$1c72f1042fbd7648$var$backwardBtn","$1c72f1042fbd7648$var$forwardBtn","$1c72f1042fbd7648$var$pageNumberList","$1c72f1042fbd7648$var$cardSet","$1c72f1042fbd7648$export$d91c9980e9a24ec2","renderMovies","activateBtn","btnLink","removeAttribute","classList","remove","deactivateBtn","setAttribute","add","renderStartPageNumberList","style","display","markup","i","renderSmallPageNumberListMarkup","hideFirstPageNumberListElement","hideLastPageNumberListElement","children","firstElementChild","showLastPageNumberListElement","lastElementChild","textContent","String","setNewBtnPageNumbersOnStart","removeCurrentBtnClass","changeCurrentBtnOnStart","changeCurrentBtnOnEnd","marginRight","showFirstPageNumberListElement","setNewBtnPageNumbers","newPageNumber","setNewBtnPageNumbersOnEnd","addEventListener","scrollIntoView","e","target","nodeName","contains","Number","renderEndPageNumberList","$b89ac968f8ae7162$var$refs","openModalFilm","closeModalFilm","body","backdropModalFilm","modalFilm","$b89ac968f8ae7162$var$renderModalFilm","vote_average","vote_count","popularity","overview","markupModalFilm","item","closest","overflow","getFilmId","dataset","infoAboutModalFilm","$1f0dc3b9307be026$var$downloadMainHomePage"],"version":3,"file":"index.7c4b0bb2.js.map"}