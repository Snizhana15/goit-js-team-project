{"mappings":"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","sources":["src/js/Api.js","src/js/render-popular-movies.js","src/js/modal-film.js","src/index.js"],"sourcesContent":["const KEY = 'fadee9dfff8cb6b1bff36771479589d6';\n\n/*\nФункцию getPopularMovies() используем для запроса при рендере карточек популярных фильмов на главной странице.\n*/\n\nexport function getPopularMovies(pageNumber = 1) {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}&page=${pageNumber}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMoviesBySearchQuery(searchQuery) используем для запроса при рендере карточек при поиске по ключевому слову.\nПараметр searchQuery должен быть строкой из input-а поиска.\n*/\n\nexport function getMoviesBySearchQuery(searchQuery) {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${searchQuery}&language=uk&page=1&include_adult=false`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nФункцию getMovieById(id) используем для запроса при отображении полной информации о фильме (модалка при клике на карточку).\nПараметр id должен быть строкой или числом. \n*/\n\nexport function getMovieById(id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=uk`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n\n/*\nЖанры каждого фильма хранятся в виде массива чисел. Кажое число соответствует своему жанру. \nФункция getGenreList() возвращает массив объектов, свойствами которых есть число и соответствующий ему жанр.\nИспользуем при отображении жанров на карточках и модалке.\n*/\n\nexport function getGenreList() {\n  return fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=uk`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (!(data.success ?? true)) {\n        throw new Error(data.status_message);\n      }\n      return data;\n    });\n}\n","import { getPopularMovies, getGenreList } from './Api';\n\nconst cardSet = document.querySelector('.card-set');\n\nasync function getGenres() {\n  try {\n    const { genres } = await getGenreList();\n    return genres;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function getDataAboutPopularMovies(pageNumber) {\n  try {\n    const { results } = await getPopularMovies(pageNumber);\n    return results;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function renderPopularMovies(pageNumber) {\n  const genres = await getGenres();\n  const movies = await getDataAboutPopularMovies(pageNumber);\n\n  const cardsMarkup = movies\n    .map(movie => renderMovieCard(movie, genres))\n    .join('');\n\n  cardSet.innerHTML = '';\n  cardSet.insertAdjacentHTML('afterbegin', cardsMarkup);\n}\n\nfunction getGenresById(idList, genres) {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n}\n\nfunction getGenresMarup(genres) {\n  let genresMarkup = '';\n\n  switch (genres.length) {\n    case 1:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]}</li>`;\n      break;\n\n    case 2:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]}</li>`;\n      break;\n\n    default:\n      genresMarkup = `<li class=\"card-set__genre-movie\">${genres[0]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">${genres[1]},&nbsp</li>\n                      <li class=\"card-set__genre-movie\">Інші</li>`;\n  }\n\n  return genresMarkup;\n}\n\nfunction renderMovieCard(movie, genres) {\n  const { genre_ids, original_title, id, release_date, title, poster_path } =\n    movie;\n\n  const alphabetGenres = getGenresById(genre_ids, genres);\n  const genresMarkup = getGenresMarup(alphabetGenres);\n  const productionYear = new Date(release_date).getFullYear().toString();\n\n  return `\n        <li class=\"card-set__item\" data-id=\"${id}\">\n            <div class=\"card-set__box-img\">\n            <img\n                loading=\"lazy\"\n                src=\"https://image.tmdb.org/t/p/original${poster_path}\"\n                alt=\"${original_title}\"\n                class=\"card-set__img\"\n                \n            />\n            </div>\n            <h3 class=\"card-set__title\">${title}</h3>\n            <div class=\"card-set__description\">\n            <ul class=\"card-set__genre\">\n                ${genresMarkup}\n            </ul>\n            <span class=\"card-set__genre-movie\">&nbsp| ${productionYear}</span>\n            </div>\n        </li>`;\n}\n\nexport { renderPopularMovies };\n","import { getMovieById } from './Api';\n\nconst refs = {\n  openModalFilm: document.querySelector('.card-set'),\n  closeModalFilm: document.querySelector('.film-card__button-close'),\n  body: document.querySelector('body'),\n  backdropModalFilm: document.querySelector('.backdrop'),\n  modalFilm: document.querySelector('.film-card__box'),\n};\n\nconst onClick = async e => {\n  if (e.path[2].nodeName !== 'LI') {\n    return;\n  }\n  refs.modalFilm.innerHTML = '';\n  refs.backdropModalFilm.classList.remove('visually-hidden');\n  refs.body.style.overflow = 'hidden';\n\n  const getFilmId = e.path[2].dataset.id;\n\n  const infoAboutModalFilm = await getMovieById(getFilmId);\n\n  renderModalFilm(infoAboutModalFilm);\n};\n\nconst renderModalFilm = modalFilm => {\n  const {\n    poster_path,\n    title,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    genres,\n    overview,\n  } = modalFilm;\n\n  const genresList = genres.map(item => item.name).join(', ');\n\n  const markupModalFilm = `<div class=\"film-card__image-block\">\n      <img\n        class=\"film-card__image\"\n        src=\"https://image.tmdb.org/t/p/original${poster_path}\"\n        alt=\"film\"\n      />\n    </div>\n    <div class=\"film-card__description\">\n      <h1 class=\"film-card__description-title\">${title}</h1>\n      <ul class=\"film-card__description-set\">\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Vote / Votes</p>\n          <p class=\"description-set__value\">\n            <span class=\"description-set__rating\">${vote_average}</span>\n            <span class=\"description-set__separator\">/</span>\n            <span class=\"description-set__vote\">${vote_count}</span>\n          </p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Popularity</p>\n          <p class=\"description-set__value\">${popularity}</p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Original Title</p>\n          <p class=\"description-set__value\">${original_title}</p>\n        </li>\n        <li class=\"description-set\">\n          <p class=\"description-set__text\">Genre</p>\n          <p class=\"description-set__value\">${genresList}</p>\n        </li>\n      </ul>\n      <div class=\"film-card__description-about\">\n        <h2 class=\"description-about__title\">About</h2>\n        <p class=\"description-about__text\">${overview}</p>\n      </div>\n      <div class=\"film-card__description-button\">\n        <button class=\"description-button description-button__watched\">\n          add to Watched\n        </button>\n        <button class=\"description-button description-button__queue\">\n          add to queue\n        </button>\n      </div>\n    </div>\n  </div>`;\n\n  refs.modalFilm.insertAdjacentHTML('beforeend', markupModalFilm);\n};\n\nrefs.openModalFilm.addEventListener('click', onClick);\n\nrefs.closeModalFilm.addEventListener('click', () => {\n  refs.backdropModalFilm.classList.add('visually-hidden');\n  refs.body.style.overflow = 'visible';\n});\n","import { renderPopularMovies } from './js/render-popular-movies';\n\n/*\nПока что, чтобы посмотреть работает ли пагинация достаточно в функцию renderPopularMovies передать номер страницы в качестве параметра, например renderPopularMovies(3)\n*/\n\nrenderPopularMovies(1);\n\n/*\nІмпорт всього файлу modal-film.js\n*/\n\nimport * as things from './js/modal-film';\n"],"names":["$a7e0245fb0110520$export$76bd8a7b840a3729","pageNumber","fetch","then","response","json","data","_success","success","Error","status_message","$696ffb40b89ad88b$var$cardSet","document","querySelector","async","$696ffb40b89ad88b$var$getGenres","genres","error","alert","$696ffb40b89ad88b$var$getDataAboutPopularMovies","results","$b89ac968f8ae7162$var$refs","openModalFilm","closeModalFilm","body","backdropModalFilm","modalFilm","$b89ac968f8ae7162$var$renderModalFilm","poster_path","title","vote_average","vote_count","popularity","original_title","overview","markupModalFilm","map","item","name","join","insertAdjacentHTML","addEventListener","e","path","nodeName","innerHTML","classList","remove","style","overflow","getFilmId","dataset","id","infoAboutModalFilm","add","cardsMarkup","movie","genre_ids","release_date","genresMarkup","length","$696ffb40b89ad88b$var$getGenresMarup","idList","find","genre","$696ffb40b89ad88b$var$getGenresById","productionYear","Date","getFullYear","toString","$696ffb40b89ad88b$var$renderMovieCard"],"version":3,"file":"index.78774b61.js.map"}