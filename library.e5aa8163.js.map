{"mappings":"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","sources":["src/library.js","src/js/render-library.js"],"sourcesContent":["import * as things from './js/modal-film';\nimport * as elements from './js/localStorage';\nimport * as things from './js/change-button-condition';\nimport * as elem from './js/modal-students';\nimport { showLibraryPage, downloadLibraryPage } from './js/render-library';\n\ndownloadLibraryPage(showLibraryPage);\n","import { getGenresMarkup } from './render-popular-movies';\n\nconst refs = {\n  cardSet: document.querySelector('.card-set'),\n  showWatchedBtn: document.querySelector('.header-library__button--watched'),\n  showQueueBtn: document.querySelector('.header-library__button--queue'),\n  paginationSet: document.querySelector('.pagination'),\n};\n\nconst watchedSpinner = document.querySelector(\n  '.header-library--watched--spinner'\n);\nconst queueSpinner = document.querySelector('.header-library--queue--spinner');\n\nlet pageCount = 0;\nconst moviesbyPage = 6;\n\nconst getWatchedList = () => {\n  const parsedWatchedMovies = JSON.parse(\n    localStorage.getItem('watched') || '[]'\n  );\n  return parsedWatchedMovies;\n};\n\nconst getQueueList = () => {\n  const parsedQueueMovies = JSON.parse(localStorage.getItem('queue') || '[]');\n  return parsedQueueMovies;\n};\n\nconst getLibraryList = () => {\n  const parsedWatchedMovies = JSON.parse(\n    localStorage.getItem('watched') || '[]'\n  );\n\n  const parsedQueueMovies = JSON.parse(localStorage.getItem('queue') || '[]');\n\n  const parsedAllMoeviesList = [...parsedWatchedMovies, ...parsedQueueMovies];\n  const parsedUniqueMoeviesList = parsedAllMoeviesList.filter(\n    (movie, movieIdx, movies) =>\n      movies.findIndex(item => item.id === movie.id) === movies.indexOf(movie)\n  );\n\n  return parsedUniqueMoeviesList;\n};\n\nconst onShowWatched = () => {\n  watchedSpinner.classList.add('spinner');\n\n  refs.paginationSet.removeEventListener('click', onClickLibrary);\n  refs.paginationSet.removeEventListener('click', onClickQueue);\n\n  const watchedList = getWatchedList();\n\n  const startPageWatched = watchedList.slice(0, moviesbyPage);\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(watchedList);\n  renderWatched(startPageWatched);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickWatched);\n};\n\nconst onShowQueue = () => {\n  queueSpinner.classList.add('spinner');\n\n  refs.paginationSet.removeEventListener('click', onClickLibrary);\n  refs.paginationSet.removeEventListener('click', onClickWatched);\n\n  const queueList = getQueueList();\n  const startPageQueue = queueList.slice(0, moviesbyPage);\n\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(queueList);\n  renderWatched(startPageQueue);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickQueue);\n};\n\nconst showLibraryPage = () => {\n  refs.paginationSet.removeEventListener('click', onClickWatched);\n  refs.paginationSet.removeEventListener('click', onClickQueue);\n\n  const libraryList = getLibraryList();\n\n  const startPageLibrary = libraryList.slice(0, moviesbyPage);\n  refs.cardSet.innerHTML = '';\n\n  getCountPages(libraryList);\n  renderWatched(startPageLibrary);\n  markupNumPage(pageCount);\n\n  refs.paginationSet.addEventListener('click', onClickLibrary);\n};\n\nconst renderWatched = parsedMovieFromStorage => {\n  parsedMovieFromStorage.map(renderLibrary);\n};\n\nconst getLibraryGenresById = (idList, genres) => {\n  return idList.map(id => genres.find(genre => genre.id === id).name);\n};\n\nconst renderLibrary = movies => {\n  const {\n    id,\n    poster_path,\n    original_title,\n    title,\n    release_date,\n    genres,\n    vote_average,\n  } = movies;\n\n  const productionYear = new Date(release_date).getFullYear().toString();\n\n  const idList = genres.map(i => (i = i.id));\n\n  const alphabetGenres = getLibraryGenresById(idList, genres);\n\n  const genresMarkup = getGenresMarkup(alphabetGenres);\n\n  const markup = `<li class=\"card-set__item\" data-id=\"${id}\">\n                <div class=\"card-set__box-img\"\">\n                <img src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${original_title}\"\n                class=\"card-set__img\"\n                />\n                </div>\n                <h3 class=\"card-set__title\">${title}</h3>\n                <div class=\"card-set__description\">\n                <ul class=\"card-set__genre\">\n                    ${genresMarkup}\n                </ul>\n                    <span class=\"card-set__production-year\">&nbsp| ${productionYear}&nbsp</span>\n                    <span class=\"card-set__rating\">${vote_average}</span>\n                </div>\n                </li>`;\n\n  refs.cardSet.insertAdjacentHTML('afterbegin', markup);\n  watchedSpinner.classList.remove('spinner');\n  queueSpinner.classList.remove('spinner');\n};\n\nconst getCountPages = arr => {\n  pageCount = Math.ceil(arr.length / moviesbyPage);\n};\n\nconst downloadLibraryPage = showLibraryPage => {\n  showLibraryPage();\n};\n\nrefs.showWatchedBtn.addEventListener('click', onShowWatched);\nrefs.showQueueBtn.addEventListener('click', onShowQueue);\n\nconst renderByPage = (a, arrayAllMoviesForRender) => {\n  const startPositionForRender = a * moviesbyPage - moviesbyPage;\n\n  const arrayMoviesByPage = arrayAllMoviesForRender.splice(\n    startPositionForRender,\n    moviesbyPage\n  );\n\n  refs.cardSet.innerHTML = '';\n  renderWatched(arrayMoviesByPage);\n  markupNumPage(pageCount);\n\n  const previousBtn = document.querySelector('.pagination__button--current');\n  previousBtn.classList.remove('pagination__button--current');\n  const currentBtn = document.querySelector(`[id=\"${a}\"]`);\n  currentBtn.classList.add('pagination__button--current');\n};\n\nconst onClickWatched = e => {\n  const watched = getWatchedList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, watched);\n};\n\nconst onClickQueue = e => {\n  const queue = getQueueList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, queue);\n};\n\nconst onClickLibrary = e => {\n  const library = getLibraryList();\n\n  getNumberPage = Number(e.target.closest('.pagination__button').id);\n\n  renderByPage(getNumberPage, library);\n};\n\n//====================render pagination for library============\n\nconst markupNumPage = pageCount => {\n  markupEmpty = [];\n\n  for (let i = 1; i <= pageCount; i++) {\n    let page = '';\n\n    if (i === 1) {\n      page = `<li class=\"pagination__item\">\n        <button class=\"pagination__button pagination__button--current\" id=\"${i}\">${i}</button>\n      </li>`;\n    } else {\n      page = `<li class=\"pagination__item\">\n        <button class=\"pagination__button\" id=\"${i}\">${i}</button>\n      </li>`;\n    }\n\n    markupEmpty.push(page);\n  }\n\n  const markup = markupEmpty.join('');\n\n  refs.paginationSet.innerHTML = '';\n  refs.paginationSet.insertAdjacentHTML('afterbegin', markup);\n};\n//==========================================\n\nexport { showLibraryPage, downloadLibraryPage };\n"],"names":["parcelRequire","$93eWd","$76d8f5d523e840d5$var$refs","cardSet","document","querySelector","showWatchedBtn","showQueueBtn","paginationSet","$76d8f5d523e840d5$var$watchedSpinner","$76d8f5d523e840d5$var$queueSpinner","$76d8f5d523e840d5$var$pageCount","$76d8f5d523e840d5$var$getWatchedList","JSON","parse","localStorage","getItem","$76d8f5d523e840d5$var$getQueueList","$76d8f5d523e840d5$var$getLibraryList","filter","movie","movieIdx","movies","findIndex","item","id","indexOf","$76d8f5d523e840d5$var$renderWatched","parsedMovieFromStorage","map","$76d8f5d523e840d5$var$renderLibrary","poster_path","original_title","title","release_date","genres","vote_average","productionYear","Date","getFullYear","toString","alphabetGenres","idList","find","genre","name","$76d8f5d523e840d5$var$getLibraryGenresById","i","markup","getGenresMarkup","insertAdjacentHTML","classList","remove","$76d8f5d523e840d5$var$getCountPages","arr","Math","ceil","length","addEventListener","add","removeEventListener","$76d8f5d523e840d5$var$onClickLibrary","$76d8f5d523e840d5$var$onClickQueue","watchedList","startPageWatched","slice","innerHTML","$76d8f5d523e840d5$var$markupNumPage","$76d8f5d523e840d5$var$onClickWatched","queueList","startPageQueue","$76d8f5d523e840d5$var$renderByPage","a","arrayAllMoviesForRender","startPositionForRender","arrayMoviesByPage","splice","e","watched","getNumberPage","Number","target","closest","queue","library","pageCount1","markupEmpty","page","push","join","libraryList","startPageLibrary","showLibraryPage1"],"version":3,"file":"library.e5aa8163.js.map"}